// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/targets-svc.proto

package targets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Targets_Get_FullMethodName = "/Targets/Get"
)

// TargetsClient is the client API for Targets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TargetsClient interface {
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type targetsClient struct {
	cc grpc.ClientConnInterface
}

func NewTargetsClient(cc grpc.ClientConnInterface) TargetsClient {
	return &targetsClient{cc}
}

func (c *targetsClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Targets_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TargetsServer is the server API for Targets service.
// All implementations must embed UnimplementedTargetsServer
// for forward compatibility
type TargetsServer interface {
	Get(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedTargetsServer()
}

// UnimplementedTargetsServer must be embedded to have forward compatible implementations.
type UnimplementedTargetsServer struct {
}

func (UnimplementedTargetsServer) Get(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTargetsServer) mustEmbedUnimplementedTargetsServer() {}

// UnsafeTargetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TargetsServer will
// result in compilation errors.
type UnsafeTargetsServer interface {
	mustEmbedUnimplementedTargetsServer()
}

func RegisterTargetsServer(s grpc.ServiceRegistrar, srv TargetsServer) {
	s.RegisterService(&Targets_ServiceDesc, srv)
}

func _Targets_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TargetsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Targets_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TargetsServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Targets_ServiceDesc is the grpc.ServiceDesc for Targets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Targets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Targets",
	HandlerType: (*TargetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Targets_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/targets-svc.proto",
}
